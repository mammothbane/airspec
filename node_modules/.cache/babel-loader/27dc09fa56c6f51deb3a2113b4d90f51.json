{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from \"react\";\nconst utils = {\n  min: array => array.reduce((currentMin, value) => value < currentMin ? value : currentMin, array[0]),\n  max: array => array.reduce((currentMax, value) => value > currentMax ? value : currentMax, array[0]),\n  sum: array => array.reduce((sum, val) => sum + val, 0)\n};\nconst offsetAndScale = rgb => {\n  // Offset calculation would divide by zero if the values are equal\n  if (rgb[0] === rgb[1] && rgb[1] === rgb[2]) {\n    return [Math.floor(255 / 3), Math.floor(255 / 3), Math.floor(255 / 3)];\n  }\n  const min = utils.min(rgb);\n  const max = utils.max(rgb);\n  const offset = rgb.map(value => (value - min) / (max - min));\n  const sum = utils.sum(offset);\n  const scaled = offset.map(value => Math.floor(value / sum * 255));\n  if (scaled[0] === 255) {\n    return [254, 0, 1];\n  }\n  if (scaled[1] === 255) {\n    return [1, 254, 0];\n  }\n  if (scaled[2] === 255) {\n    return [0, 1, 254];\n  }\n  return scaled;\n};\nexport const useAirSpecInterface = () => {\n  _s();\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [toggleCharacteristic, setToggleCharacteristic] = React.useState(null);\n  const [colorCharacteristic, setColorCharacteristic] = React.useState(null);\n  const connect = async () => {\n    var _device$gatt;\n    const device = await navigator.bluetooth.requestDevice({\n      // acceptAllDevices: true\n      filters: [{\n        namePrefix: \"AirSpec\"\n      }],\n      // Philips Hue Light Control Service\n      optionalServices: [0xfe80]\n    });\n    if (!device) {\n      console.error(\"Failed to connect to device.\");\n      return;\n    }\n    const server = await ((_device$gatt = device.gatt) === null || _device$gatt === void 0 ? void 0 : _device$gatt.connect());\n    if (!server) {\n      console.error(\"Failed to connect to server\");\n      return;\n    }\n    // Philips Hue Light Control Service\n    const service = await server.getPrimaryService(\n    // \"0000fe80-8e22-4541-9d4c-21edae82ed19\"\n    0xfe80);\n    if (!service) {\n      console.error(\"Failed to connect to service.\");\n      return;\n    }\n    const toggleChar = await service.getCharacteristic(\n    // \"932c32bd-0002-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n    0xfe82);\n    if (!toggleChar) {\n      console.error(\"Failed to get toggle characteristic.\");\n      return;\n    }\n    setToggleCharacteristic(toggleChar);\n    const colorChar = await service.getCharacteristic(0xfe82\n    // \"932c32bd-0005-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n    );\n\n    if (!colorChar) {\n      console.error(\"Failed to get color characteristic.\");\n      return;\n    }\n    setColorCharacteristic(colorChar);\n    setIsConnected(true);\n  };\n  const toggle = async () => {\n    const currentValue = await (toggleCharacteristic === null || toggleCharacteristic === void 0 ? void 0 : toggleCharacteristic.readValue());\n    const lightIsCurrentlyOn = currentValue !== null && currentValue !== void 0 && currentValue.getUint8(0) ? true : false;\n    await (toggleCharacteristic === null || toggleCharacteristic === void 0 ? void 0 : toggleCharacteristic.writeValue(new Uint8Array([lightIsCurrentlyOn ? 0x0 : 0x1])));\n  };\n  const setRedLight = () => {\n    colorCharacteristic === null || colorCharacteristic === void 0 ? void 0 : colorCharacteristic.writeValue(new Uint8Array([0x01, 0xfe, 0x01, 0x00]));\n  };\n  const setBlueLight = () => {\n    colorCharacteristic === null || colorCharacteristic === void 0 ? void 0 : colorCharacteristic.writeValue(new Uint8Array([0x01, 0x00, 0xfe, 0x01]));\n  };\n  const setGreenLight = () => {\n    colorCharacteristic === null || colorCharacteristic === void 0 ? void 0 : colorCharacteristic.writeValue(new Uint8Array([0x01, 0x01, 0x00, 0xfe]));\n  };\n  const setColor = color => {\n    const updatedColor = (color.replace(/[^0-9a-f]/, \"\") + \"000000\").slice(0, 6);\n    const r = updatedColor.slice(0, 2);\n    const b = updatedColor.slice(2, 4);\n    const g = updatedColor.slice(4, 6);\n    const [normalizedR, normalizedG, normalizedB] = offsetAndScale([parseInt(r, 16), parseInt(b, 16), parseInt(g, 16)]);\n\n    // Set light color to the normalized values\n    colorCharacteristic === null || colorCharacteristic === void 0 ? void 0 : colorCharacteristic.writeValue(new Uint8Array([0x01, normalizedR, normalizedB, normalizedG]));\n    return updatedColor;\n  };\n  return {\n    connect,\n    toggle,\n    isConnected,\n    setRedLight,\n    setGreenLight,\n    setBlueLight,\n    setColor\n  };\n};\n_s(useAirSpecInterface, \"YDUblNsEhTe18UsXgiM2HB/I6Og=\");","map":{"version":3,"names":["React","utils","min","array","reduce","currentMin","value","max","currentMax","sum","val","offsetAndScale","rgb","Math","floor","offset","map","scaled","useAirSpecInterface","isConnected","setIsConnected","useState","toggleCharacteristic","setToggleCharacteristic","colorCharacteristic","setColorCharacteristic","connect","device","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","console","error","server","gatt","service","getPrimaryService","toggleChar","getCharacteristic","colorChar","toggle","currentValue","readValue","lightIsCurrentlyOn","getUint8","writeValue","Uint8Array","setRedLight","setBlueLight","setGreenLight","setColor","color","updatedColor","replace","slice","r","b","g","normalizedR","normalizedG","normalizedB","parseInt"],"sources":["/Users/chwalek/dev/airspecConfigurator/src/hooks/useAirSpecInterface.ts"],"sourcesContent":["import * as React from \"react\";\nexport interface AirSpec {\n  connect: () => void;\n  isConnected: boolean;\n  toggle: () => void;\n  setRedLight: () => void;\n  setGreenLight: () => void;\n  setBlueLight: () => void;\n  setColor: (color: string) => string;\n}\nconst utils = {\n  min: (array: number[]) =>\n    array.reduce(\n      (currentMin, value) => (value < currentMin ? value : currentMin),\n      array[0]\n    ),\n  max: (array: number[]) =>\n    array.reduce(\n      (currentMax, value) => (value > currentMax ? value : currentMax),\n      array[0]\n    ),\n  sum: (array: number[]) => array.reduce((sum, val) => sum + val, 0),\n};\nconst offsetAndScale = (rgb: number[]) => {\n  // Offset calculation would divide by zero if the values are equal\n  if (rgb[0] === rgb[1] && rgb[1] === rgb[2]) {\n    return [Math.floor(255 / 3), Math.floor(255 / 3), Math.floor(255 / 3)];\n  }\n\n  const min = utils.min(rgb);\n  const max = utils.max(rgb);\n\n  const offset = rgb.map((value) => (value - min) / (max - min));\n  const sum = utils.sum(offset);\n  const scaled = offset.map((value) => Math.floor((value / sum) * 255));\n  if (scaled[0] === 255) {\n    return [254, 0, 1];\n  }\n  if (scaled[1] === 255) {\n    return [1, 254, 0];\n  }\n  if (scaled[2] === 255) {\n    return [0, 1, 254];\n  }\n  return scaled;\n};\n\nexport const useAirSpecInterface = (): AirSpec => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [toggleCharacteristic, setToggleCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n  const [colorCharacteristic, setColorCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n\n  const connect = async () => {\n    const device = await navigator.bluetooth.requestDevice({\n      // acceptAllDevices: true\n      filters: [\n        {\n          namePrefix: \"AirSpec\",\n        },\n      ],\n      // Philips Hue Light Control Service\n      optionalServices: [0xfe80],\n    });\n    if (!device) {\n      console.error(\"Failed to connect to device.\");\n      return;\n    }\n    const server = await device.gatt?.connect();\n\n    if (!server) {\n      console.error(\"Failed to connect to server\");\n      return;\n    }\n    // Philips Hue Light Control Service\n    const service = await server.getPrimaryService(\n      // \"0000fe80-8e22-4541-9d4c-21edae82ed19\"\n      0xfe80\n    );\n\n    if (!service) {\n      console.error(\"Failed to connect to service.\");\n      return;\n    }\n\n    const toggleChar = await service.getCharacteristic(\n      // \"932c32bd-0002-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n      0xfe82\n      );\n\n    if (!toggleChar) {\n      console.error(\"Failed to get toggle characteristic.\");\n      return;\n    }\n    setToggleCharacteristic(toggleChar);\n\n    const colorChar = await service.getCharacteristic(\n      0xfe82\n      // \"932c32bd-0005-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n    );\n\n    if (!colorChar) {\n      console.error(\"Failed to get color characteristic.\");\n      return;\n    }\n    setColorCharacteristic(colorChar);\n\n    setIsConnected(true);\n  };\n\n  const toggle = async () => {\n    const currentValue = await toggleCharacteristic?.readValue();\n    const lightIsCurrentlyOn = currentValue?.getUint8(0) ? true : false;\n\n    await toggleCharacteristic?.writeValue(\n      new Uint8Array([lightIsCurrentlyOn ? 0x0 : 0x1])\n    );\n  };\n\n  const setRedLight = () => {\n    colorCharacteristic?.writeValue(new Uint8Array([0x01, 0xfe, 0x01, 0x00]));\n  };\n  const setBlueLight = () => {\n    colorCharacteristic?.writeValue(new Uint8Array([0x01, 0x00, 0xfe, 0x01]));\n  };\n  const setGreenLight = () => {\n    colorCharacteristic?.writeValue(new Uint8Array([0x01, 0x01, 0x00, 0xfe]));\n  };\n\n  const setColor = (color: string) => {\n    const updatedColor = (color.replace(/[^0-9a-f]/, \"\") + \"000000\").slice(\n      0,\n      6\n    );\n    const r = updatedColor.slice(0, 2);\n    const b = updatedColor.slice(2, 4);\n    const g = updatedColor.slice(4, 6);\n    const [normalizedR, normalizedG, normalizedB] = offsetAndScale([\n      parseInt(r, 16),\n      parseInt(b, 16),\n      parseInt(g, 16),\n    ]);\n\n    // Set light color to the normalized values\n    colorCharacteristic?.writeValue(\n      new Uint8Array([0x01, normalizedR, normalizedB, normalizedG])\n    );\n    return updatedColor;\n  };\n\n  return {\n    connect,\n    toggle,\n    isConnected,\n    setRedLight,\n    setGreenLight,\n    setBlueLight,\n    setColor,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}