{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from \"react\";\nconst utils = {\n  min: array => array.reduce((currentMin, value) => value < currentMin ? value : currentMin, array[0]),\n  max: array => array.reduce((currentMax, value) => value > currentMax ? value : currentMax, array[0]),\n  sum: array => array.reduce((sum, val) => sum + val, 0)\n};\nconst offsetAndScale = rgb => {\n  // Offset calculation would divide by zero if the values are equal\n  if (rgb[0] === rgb[1] && rgb[1] === rgb[2]) {\n    return [Math.floor(255 / 3), Math.floor(255 / 3), Math.floor(255 / 3)];\n  }\n  const min = utils.min(rgb);\n  const max = utils.max(rgb);\n  const offset = rgb.map(value => (value - min) / (max - min));\n  const sum = utils.sum(offset);\n  const scaled = offset.map(value => Math.floor(value / sum * 255));\n  if (scaled[0] === 255) {\n    return [254, 0, 1];\n  }\n  if (scaled[1] === 255) {\n    return [1, 254, 0];\n  }\n  if (scaled[2] === 255) {\n    return [0, 1, 254];\n  }\n  return scaled;\n};\nfunction getUnixTimestampArray() {\n  //https://stackoverflow.com/questions/221294/how-do-i-get-a-timestamp-in-javascript\n  var timestamp_seconds = Math.round(+new Date() / 1000);\n  var timestampArray = new Uint8Array([timestamp_seconds & 0xFF, timestamp_seconds >> 8 & 0xFF, timestamp_seconds >> 16 & 0xFF, timestamp_seconds >> 24 & 0xFF]);\n  return timestampArray;\n}\nfunction getPayloadSizeArray(value) {\n  var payloadSizeArray = new Uint8Array([value & 0xFF, value >> 8 & 0xFF]);\n  return payloadSizeArray;\n}\nfunction getHeader(packet_type, payload_size) {\n  var timestamp = getUnixTimestampArray();\n  var payloadSize = getPayloadSizeArray(payload_size);\n  var packetType = new Uint8Array([packet_type & 0xFF, packet_type >> 8 & 0xFF]);\n  var header = new Uint8Array(timestamp.length + payloadSize.length + packetType.length);\n  header.set(packetType);\n  header.set(payloadSize, packetType.length);\n  header.set(timestamp, packetType.length + payloadSize.length);\n  return header;\n}\nfunction blueGreenModePayload(start_bit, blue_min_intensity, blue_max_intensity, green_max_intensity, step_size, step_duration) {\n  var payload = new Uint8Array([2, start_bit & 0xFF, blue_min_intensity & 0xFF, blue_max_intensity & 0xFF, green_max_intensity & 0xFF, step_size & 0xFF, step_duration & 0xFF]);\n  return payload;\n}\nexport const useAirSpecInterface = () => {\n  _s();\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [rxCharacteristic, setRxCharacteristic] = React.useState(null);\n  const [txCharacteristic, setTxCharacteristic] = React.useState(null);\n  const connect = async () => {\n    var _device$gatt;\n    const device = await navigator.bluetooth.requestDevice({\n      // acceptAllDevices: true\n      filters: [{\n        namePrefix: \"AirSpec\"\n      }],\n      // Philips Hue Light Control Service\n      optionalServices: [0xfe80]\n    });\n    if (!device) {\n      console.error(\"Failed to connect to device.\");\n      return;\n    }\n    const server = await ((_device$gatt = device.gatt) === null || _device$gatt === void 0 ? void 0 : _device$gatt.connect());\n    if (!server) {\n      console.error(\"Failed to connect to server\");\n      return;\n    }\n    // Philips Hue Light Control Service\n    const service = await server.getPrimaryService(\n    // \"0000fe80-8e22-4541-9d4c-21edae82ed19\"\n    0xfe80);\n    if (!service) {\n      console.error(\"Failed to connect to service.\");\n      return;\n    }\n    const rxChar = await service.getCharacteristic(\n    // \"932c32bd-0002-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n    0xfe82);\n    if (!rxChar) {\n      console.error(\"Failed to get toggle characteristic.\");\n      return;\n    }\n    setRxCharacteristic(rxChar);\n    const txChar = await service.getCharacteristic(0xfe82\n    // \"932c32bd-0005-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n    );\n\n    if (!txChar) {\n      console.error(\"Failed to get color characteristic.\");\n      return;\n    }\n    setTxCharacteristic(txChar);\n    setIsConnected(true);\n  };\n  const toggle = async () => {\n    const currentValue = await (rxCharacteristic === null || rxCharacteristic === void 0 ? void 0 : rxCharacteristic.readValue());\n    const lightIsCurrentlyOn = currentValue !== null && currentValue !== void 0 && currentValue.getUint8(0) ? true : false;\n    await (rxCharacteristic === null || rxCharacteristic === void 0 ? void 0 : rxCharacteristic.writeValue(new Uint8Array([lightIsCurrentlyOn ? 0x0 : 0x1])));\n  };\n  const setSpecialMode = () => {\n    // txCharacteristic?.writeValue(new Uint8Array([0x01, 0xfe, 0x01, 0x00]));\n    // var header_timestamp = getUnixTimestampArray();\n\n    var header = getHeader(5, 10);\n    console.log(header);\n  };\n  const setBlueGreenMode = val => {\n    // txCharacteristic?.writeValue(new Uint8Array([0x01, 0xfe, 0x01, 0x00]));\n    // var header_timestamp = getUnixTimestampArray();\n    var start_bit = 1;\n    var blue_min_intensity = 10;\n    var blue_max_intensity = 255;\n    var green_max_intensity = 255;\n    var step_size = 1;\n    var step_duration = 10;\n    console.log(val);\n    var payload = blueGreenModePayload(start_bit, blue_min_intensity, blue_max_intensity, green_max_intensity, step_size, step_duration);\n    var header = getHeader(5, payload.length);\n    var packet = new Uint8Array(header.length + payload.length);\n    packet.set(header);\n    packet.set(payload, header.length);\n    console.log(packet);\n    // txCharacteristic?.writeValue(packet);\n  };\n\n  const setBlueLight = () => {\n    txCharacteristic === null || txCharacteristic === void 0 ? void 0 : txCharacteristic.writeValue(new Uint8Array([0x01, 0x00, 0xfe, 0x01]));\n  };\n  const setGreenLight = () => {\n    txCharacteristic === null || txCharacteristic === void 0 ? void 0 : txCharacteristic.writeValue(new Uint8Array([0x01, 0x01, 0x00, 0xfe]));\n  };\n  const setColor = color => {\n    const updatedColor = (color.replace(/[^0-9a-f]/, \"\") + \"000000\").slice(0, 6);\n    const r = updatedColor.slice(0, 2);\n    const b = updatedColor.slice(2, 4);\n    const g = updatedColor.slice(4, 6);\n    const [normalizedR, normalizedG, normalizedB] = offsetAndScale([parseInt(r, 16), parseInt(b, 16), parseInt(g, 16)]);\n\n    // Set light color to the normalized values\n    txCharacteristic === null || txCharacteristic === void 0 ? void 0 : txCharacteristic.writeValue(new Uint8Array([0x01, normalizedR, normalizedB, normalizedG]));\n    return updatedColor;\n  };\n  return {\n    connect,\n    toggle,\n    isConnected,\n    setSpecialMode,\n    setBlueGreenMode,\n    setGreenLight,\n    setBlueLight,\n    setColor\n  };\n};\n_s(useAirSpecInterface, \"AOKQrnqUAc1nJM9TKLW3Gf/OYHw=\");","map":{"version":3,"names":["React","utils","min","array","reduce","currentMin","value","max","currentMax","sum","val","offsetAndScale","rgb","Math","floor","offset","map","scaled","getUnixTimestampArray","timestamp_seconds","round","Date","timestampArray","Uint8Array","getPayloadSizeArray","payloadSizeArray","getHeader","packet_type","payload_size","timestamp","payloadSize","packetType","header","length","set","blueGreenModePayload","start_bit","blue_min_intensity","blue_max_intensity","green_max_intensity","step_size","step_duration","payload","useAirSpecInterface","isConnected","setIsConnected","useState","rxCharacteristic","setRxCharacteristic","txCharacteristic","setTxCharacteristic","connect","device","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","console","error","server","gatt","service","getPrimaryService","rxChar","getCharacteristic","txChar","toggle","currentValue","readValue","lightIsCurrentlyOn","getUint8","writeValue","setSpecialMode","log","setBlueGreenMode","packet","setBlueLight","setGreenLight","setColor","color","updatedColor","replace","slice","r","b","g","normalizedR","normalizedG","normalizedB","parseInt"],"sources":["/Users/chwalek/dev/airspecConfigurator/src/hooks/useAirSpecInterface.ts"],"sourcesContent":["import * as React from \"react\";\nexport interface AirSpec {\n  connect: () => void;\n  isConnected: boolean;\n  toggle: () => void;\n  setSpecialMode: () => void;\n  setBlueGreenMode: (val) => void;\n  setGreenLight: () => void;\n  setBlueLight: () => void;\n  setColor: (color: string) => string;\n}\nconst utils = {\n  min: (array: number[]) =>\n    array.reduce(\n      (currentMin, value) => (value < currentMin ? value : currentMin),\n      array[0]\n    ),\n  max: (array: number[]) =>\n    array.reduce(\n      (currentMax, value) => (value > currentMax ? value : currentMax),\n      array[0]\n    ),\n  sum: (array: number[]) => array.reduce((sum, val) => sum + val, 0),\n};\nconst offsetAndScale = (rgb: number[]) => {\n  // Offset calculation would divide by zero if the values are equal\n  if (rgb[0] === rgb[1] && rgb[1] === rgb[2]) {\n    return [Math.floor(255 / 3), Math.floor(255 / 3), Math.floor(255 / 3)];\n  }\n\n  const min = utils.min(rgb);\n  const max = utils.max(rgb);\n\n  const offset = rgb.map((value) => (value - min) / (max - min));\n  const sum = utils.sum(offset);\n  const scaled = offset.map((value) => Math.floor((value / sum) * 255));\n  if (scaled[0] === 255) {\n    return [254, 0, 1];\n  }\n  if (scaled[1] === 255) {\n    return [1, 254, 0];\n  }\n  if (scaled[2] === 255) {\n    return [0, 1, 254];\n  }\n  return scaled;\n};\n\nfunction getUnixTimestampArray() {\n  //https://stackoverflow.com/questions/221294/how-do-i-get-a-timestamp-in-javascript\n  var timestamp_seconds = Math.round(+new Date()/1000);\n  var timestampArray = new Uint8Array([\n      (timestamp_seconds) & 0xFF, \n      (timestamp_seconds>>8) & 0xFF, \n      (timestamp_seconds>>16) & 0xFF, \n      (timestamp_seconds>>24) & 0xFF]);\n  return timestampArray;\n}\n\nfunction getPayloadSizeArray(value) {\n  var payloadSizeArray = new Uint8Array([\n    (value) & 0xFF, \n    (value>>8) & 0xFF]);\n  return payloadSizeArray;\n}\n\nfunction getHeader(packet_type, payload_size) {\n  var timestamp = getUnixTimestampArray();\n  var payloadSize = getPayloadSizeArray(payload_size);\n  var packetType = new Uint8Array([\n    (packet_type) & 0xFF, \n    (packet_type>>8) & 0xFF]);\n  var header = new Uint8Array(timestamp.length + payloadSize.length + packetType.length);\n  header.set(packetType);\n  header.set(payloadSize, packetType.length);\n  header.set(timestamp, packetType.length + payloadSize.length);\n  return header;\n}\n\nfunction blueGreenModePayload(start_bit, \n  blue_min_intensity, \n  blue_max_intensity,\n  green_max_intensity,\n  step_size,\n  step_duration) {\n\n    var payload = new Uint8Array([\n      2,\n      (start_bit) & 0xFF, \n      (blue_min_intensity) & 0xFF,\n      (blue_max_intensity) & 0xFF,\n      (green_max_intensity) & 0xFF,\n      (step_size) & 0xFF,\n      (step_duration) & 0xFF]);\n    return payload;\n  }\n\n\nexport const useAirSpecInterface = (): AirSpec => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [rxCharacteristic, setRxCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n  const [txCharacteristic, setTxCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n\n  const connect = async () => {\n    const device = await navigator.bluetooth.requestDevice({\n      // acceptAllDevices: true\n      filters: [\n        {\n          namePrefix: \"AirSpec\",\n        },\n      ],\n      // Philips Hue Light Control Service\n      optionalServices: [0xfe80],\n    });\n    if (!device) {\n      console.error(\"Failed to connect to device.\");\n      return;\n    }\n    const server = await device.gatt?.connect();\n\n    if (!server) {\n      console.error(\"Failed to connect to server\");\n      return;\n    }\n    // Philips Hue Light Control Service\n    const service = await server.getPrimaryService(\n      // \"0000fe80-8e22-4541-9d4c-21edae82ed19\"\n      0xfe80\n    );\n\n    if (!service) {\n      console.error(\"Failed to connect to service.\");\n      return;\n    }\n\n    const rxChar = await service.getCharacteristic(\n      // \"932c32bd-0002-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n      0xfe82\n      );\n\n    if (!rxChar) {\n      console.error(\"Failed to get toggle characteristic.\");\n      return;\n    }\n    setRxCharacteristic(rxChar);\n\n    const txChar = await service.getCharacteristic(\n      0xfe82\n      // \"932c32bd-0005-47a2-835a-a8d455b859dd\" // Philips Hue Light On/Off Toggle\n    );\n\n    if (!txChar) {\n      console.error(\"Failed to get color characteristic.\");\n      return;\n    }\n    setTxCharacteristic(txChar);\n\n    setIsConnected(true);\n  };\n\n  const toggle = async () => {\n    const currentValue = await rxCharacteristic?.readValue();\n    const lightIsCurrentlyOn = currentValue?.getUint8(0) ? true : false;\n\n    await rxCharacteristic?.writeValue(\n      new Uint8Array([lightIsCurrentlyOn ? 0x0 : 0x1])\n    );\n  };\n\n  const setSpecialMode = () => {\n    // txCharacteristic?.writeValue(new Uint8Array([0x01, 0xfe, 0x01, 0x00]));\n    // var header_timestamp = getUnixTimestampArray();\n    \n    var header = getHeader(5, 10);\n    console.log(header);\n  };\n\n  const setBlueGreenMode = (val) => {\n    // txCharacteristic?.writeValue(new Uint8Array([0x01, 0xfe, 0x01, 0x00]));\n    // var header_timestamp = getUnixTimestampArray();\n    var start_bit = 1;\n    var blue_min_intensity = 10;\n    var blue_max_intensity = 255;\n    var green_max_intensity = 255;\n    var step_size = 1;\n    var step_duration = 10;\n    console.log(val);\n    var payload = blueGreenModePayload(start_bit, \n      blue_min_intensity, blue_max_intensity,\n      green_max_intensity, step_size, step_duration);\n    var header = getHeader(5, payload.length);\n    var packet = new Uint8Array(header.length + payload.length);\n    packet.set(header);\n    packet.set(payload, header.length);\n    console.log(packet);\n    // txCharacteristic?.writeValue(packet);\n  };\n\n  const setBlueLight = () => {\n    txCharacteristic?.writeValue(new Uint8Array([0x01, 0x00, 0xfe, 0x01]));\n  };\n  const setGreenLight = () => {\n    txCharacteristic?.writeValue(new Uint8Array([0x01, 0x01, 0x00, 0xfe]));\n  };\n\n  const setColor = (color: string) => {\n    const updatedColor = (color.replace(/[^0-9a-f]/, \"\") + \"000000\").slice(\n      0,\n      6\n    );\n    const r = updatedColor.slice(0, 2);\n    const b = updatedColor.slice(2, 4);\n    const g = updatedColor.slice(4, 6);\n    const [normalizedR, normalizedG, normalizedB] = offsetAndScale([\n      parseInt(r, 16),\n      parseInt(b, 16),\n      parseInt(g, 16),\n    ]);\n\n    // Set light color to the normalized values\n    txCharacteristic?.writeValue(\n      new Uint8Array([0x01, normalizedR, normalizedB, normalizedG])\n    );\n    return updatedColor;\n  };\n\n  return {\n    connect,\n    toggle,\n    isConnected,\n    setSpecialMode,\n    setBlueGreenMode,\n    setGreenLight,\n    setBlueLight,\n    setColor,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}